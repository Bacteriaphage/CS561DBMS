#include <stdio.h>
#include <vector>
#include <string>
using namespace std;
//----------------------------------------------------------------------
// HOST VARIABLES definitions
//----------------------------------------------------------------------
EXEC SQL BEGIN DECLARE SECTION;
struct {
	char	 cust[20];
	char	 prod[20];
	short    dd;
	short    mm;
	short	 yy;
	char	 state[3];
	long	 quant;
}	sale_rec;
EXEC SQL END DECLARE SECTION;
EXEC SQL INCLUDE sqlca;
//----------------------------------------------------------------------
// CLASS PROTOTYPE declaration
//----------------------------------------------------------------------
class Product;
class DetailInfo;
//----------------------------------------------------------------------
// Data Structure definitions(customer)
//----------------------------------------------------------------------
class Customer{
public:
	char name[20];
	vector<Product> product;

	Customer(char c[]){
		for(int i=0; i<20; i++){
			name[i]=c[i];
		}
	}
	~Customer(){
		delete [] name;
	}
};
//----------------------------------------------------------------------
// Data Structure definitions(product)
//----------------------------------------------------------------------
class Product{
public:
	char name[20];
	vector<DetailInfo> detailInfo;

	Product(char c[]){
		for(int i=0; i<20; i++){
			name[i]=c[i];
		}
	}
	~Product(){
		delete [] name;
	}
};
//----------------------------------------------------------------------
// Data Structure definitions(product)
//----------------------------------------------------------------------
class DetailInfo{
public:
	short    dd;
	short    mm;
	short	 yy;
	char	 state[3];
	long	 quant;

	DetailInfo(const short &d, const short &m, const short &y, char s[], const long &q) : dd(d), mm(m), yy(y), quant(q){
		for(int i=0; i<3; i++){
			state[i]=s[i];
		}
	} 
};

//----------------------------------------------------------------------
void trieBuild(vector<Customer> &custList){
//----------------------------------------------------------------------
	bool cust_in_the_list = false;
	bool prod_in_the_list = false;
	int custIndex, prodIndex;
	for(custIndex=0; custIndex<custList.size(); custIndex++)     //check if current customer is in the list
		if(strcmp(custList[custIndex].name, sale_rec.cust)==0){
				cust_in_the_list = true;
				break;
			}
	if(cust_in_the_list){
		for(prodIndex=0; prodIndex<custList[custIndex].product.size();i++)
			if(strcmp(custList[custIndex].product[prodIndex].name,sale_rec.prod)==0){
				prod_in_the_list=true;
				break;
			}
		if(prod_in_the_list){
			custList[custIndex].product[prodIndex].detailInfo.push_back(DetailInfo(sale_rec.dd,sale_rec.mm,sale_rec.yy,sale_rec.state,sale_rec.quant));
		}
		else{
			custList[custIndex].product.push_back(Product(sale_rec.prod));
			custList[custIndex].product[prodIndex].detailInfo.push_back(DetailInfo(sale_rec.dd,sale_rec.mm,sale_rec.yy,sale_rec.state,sale_rec.quant));
		}
	}
	else{
		custList.push_back(Customer(sale_rec.cust));
		custList[custIndex].product.push_back(Product(sale_rec.prod));
		custList[custIndex].product[0].detailInfo.push_back(DetailInfo(sale_rec.dd,sale_rec.mm,sale_rec.yy,sale_rec.state,sale_rec.quant));
	}
}
//----------------------------------------------------------------------
// Main function
//----------------------------------------------------------------------
int main(int argc, char* argv[]){
	vector<Customer> customerList;
	//------------------------------------------------------------------
	// DATABASE CONNECTION
	//------------------------------------------------------------------
	EXEC SQL CONNECT TO postgres@localhost:5432 USER postgres IDENTIFIED BY zhy199208;
   
    if (sqlca.sqlcode != 0) {	// login error
   		printf ("Login error!!!\n");
   		return -1;
    }
    EXEC SQL WHENEVER sqlerror sqlprint;
    //------------------------------------------------------------------
    // READ RECORDS
    //------------------------------------------------------------------
    EXEC SQL DECLARE mycursor CURSOR FOR SELECT * FROM sales;
    EXEC SQL SET TRANSACTION read only;
    // Open cursor
    EXEC SQL OPEN mycursor;
    // Fetch Data
    EXEC SQL FETCH FROM mycursor INTO :sale_rec;    //fetch the first row
    while (sqlca.sqlcode == 0) {
       trieBuild(customerList);
       EXEC SQL FETCH FROM mycursor INTO :sale_rec; //fetch the rest rows
    }
    // Close cursor
    EXEC SQL CLOSE mycursor;

    return 0;
}