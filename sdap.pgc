/*
 * File - sdap.pgc (Need the .pgc extension!) 
 *
 * Desc - This is a simple skeleton program using Embedded SQL to read all
 *        of the rows from the table "sales" and output to the console.
 *        Simple but it contains all of the essential features of ESQL 
 *        discussed in class!
 *
 * Steps to run this program : 
 *  1. In the program (L93), modify [dbname], [username], [password] to
 *     yours ([dbname] is the same as your [username] by default).
 *  2. Preprocessor - $ ecpg -I "C:\Program Files\PostgreSQL\9.4\include" sdap.pgc
 *  3. Compile      - $ gcc -c -I "C:\Program Files\PostgreSQL\9.4\include" sdap.c
 *  4. Link         - $ gcc -L "C:\Program Files\PostgreSQL\9.4\lib" -lecpg -o sdap sdap.o
 *  5. Execute      - $ .\sdap
 */

#include <stdio.h>
#include <string.h>
//----------------------------------------------------------------------
// HOST VARIABLES definitions
//----------------------------------------------------------------------
EXEC SQL BEGIN DECLARE SECTION;
struct {
   char  *cust;
   char  *prod;
   short    dd;
   short    mm;
   short    yy;
   char  *state;
   long   quant;
}  sale_rec;
EXEC SQL END DECLARE SECTION;
EXEC SQL INCLUDE sqlca;
//----------------------------------------------------------------------
// HOST VARIABLES definitions
//----------------------------------------------------------------------
//query 1 data structure
//for each customer, store max and min quantity of product along with their date, state and finally calculate average 
struct Data1{
   char    cust[20];
   char    max_prod[20];
   char    min_prod[20];
   short   max_dd;
   short   max_mm;
   short   max_yy;
   char    max_state[3];
   long    max_quant; 
   short   min_dd;
   short   min_mm;
   short   min_yy;
   char    min_state[3];
   long    min_quant;
   long    sum;
   long    count;
};
//query 2 data structure
//for each combination of customer and product, store max quantity in NY, min quantity in NJ and CT along with their date
struct Data2{
   char    cust[20];
   char    prod[20];
   long    NY_MAX;
   short   NY_month;
   short   NY_day;
   short   NY_year;
   long    NJ_MIN;
   short   NJ_month;
   short   NJ_day;
   short   NJ_year;
   long    CT_MIN;
   short   CT_month;
   short   CT_day;
   short   CT_year;
};
//----------------------------------------------------------------------
// FUNCTION PROTOTYPE declaration
//----------------------------------------------------------------------
void  process1(struct Data1 *, int *);
void  process2(struct Data2 *, int *);
void  output1(struct Data1 *, int);
void  output2(struct Data2 *, int);
//----------------------------------------------------------------------
int main(int argc, char* argv[])
//----------------------------------------------------------------------
{
   struct Data1 data1[500];
   struct Data2 data2[500];
   int counter1=0;
   int counter2=0;
   //----------------------------------------------------------------------
   // DATABASE CONNECTION
   //----------------------------------------------------------------------
   EXEC SQL CONNECT TO postgres@localhost:5432 USER postgres IDENTIFIED BY zhy199208;
   
   if (sqlca.sqlcode != 0) {  // login error
      printf ("Login error!!!\n");
      return -1;
   }
   EXEC SQL WHENEVER sqlerror sqlprint;
   //----------------------------------------------------------------------
   // READ RECORDS
   //----------------------------------------------------------------------
   EXEC SQL DECLARE mycursor CURSOR FOR SELECT * FROM sales;
   EXEC SQL SET TRANSACTION read only;
   // Open cursor
   EXEC SQL OPEN mycursor;
   // Fetch Data
   EXEC SQL FETCH FROM mycursor INTO :sale_rec; //fetch the first row
   while (sqlca.sqlcode == 0) {
      process1(data1, &counter1);
      process2(data2, &counter2);
      EXEC SQL FETCH FROM mycursor INTO :sale_rec; //fetch the rest rows
   }
   // Close cursor
   EXEC SQL CLOSE mycursor;
   //query print out
   printf(" CUSTOMER  MAX_Q  MAX_PROD  MAX_DATE    ST  MIN_Q  MIN_PROD  MIN_DATE    ST  AVG_Q\n");
   printf(" ========  =====  ========  ==========  ==  =====  ========  ==========  ==  =====\n");
   output1(data1, counter1);
   printf("\n\n");
   printf(" CUSTOMER  PRODUCT  NY_MAX  DATE        NJ_MIN  DATE        CT_MIN  DATE      \n");
   printf(" ========  =======  ======  ==========  ======  ==========  ======  ==========\n");
   output2(data2, counter2);
   return 0;
}

//----------------------------------------------------------------------
void output1(struct Data1 *data, int i)
//----------------------------------------------------------------------
{  
   for(int j = 0; j < i; j++){
      printf(" %-8s ",data[j].cust);   // Customer
      printf(" %5d ",data[j].max_quant);  // Quantity
      printf(" %-8s ",data[j].max_prod);   // Product
      printf(" %02d/%02d/%04d ",data[j].max_mm, data[j].max_dd, data[j].max_yy); //date
      printf(" %-2s ",data[j].max_state);  // State
      printf(" %5d ",data[j].min_quant);  // Quantity
      printf(" %-8s ",data[j].min_prod);   // Product
      printf(" %02d/%02d/%04d ",data[j].min_mm, data[j].min_dd, data[j].min_yy); //date
      printf(" %-2s ",data[j].min_state);  // State
      printf(" %5d \n",(data[j].sum/data[j].count));  // Average
   }
}
//----------------------------------------------------------------------
void output2(struct Data2 *data, int i){
//----------------------------------------------------------------------
   for(int j=0; j<i; j++){
      printf(" %-8s ",data[j].cust);   // Customer
      printf(" %-7s ",data[j].prod);   // Product
      if(data[j].NY_MAX!=-1){
         printf(" %6d ",data[j].NY_MAX);  // Quantity
         printf(" %02d/%02d/%04d ",data[j].NY_month, data[j].NY_day, data[j].NY_year); //date
      }
      else{
         printf("    N/A ");
         printf("        N/A ");
      }
      if(data[j].NJ_MIN!=-1){
         printf(" %6d ",data[j].NJ_MIN);  // Quantity
         printf(" %02d/%02d/%04d ",data[j].NJ_month, data[j].NJ_day, data[j].NJ_year); //date
      }
      else{
         printf("    N/A ");
         printf("        N/A ");
      }
      if(data[j].CT_MIN!=-1){
         printf(" %6d ",data[j].CT_MIN);  // Quantity
         printf(" %02d/%02d/%04d \n",data[j].CT_month, data[j].CT_day, data[j].CT_year); //date
      }
      else{
         printf("    N/A ");
         printf("        N/A \n");
      }
   }
}
//----------------------------------------------------------------------
void process1(struct Data1 *data, int *i){
//----------------------------------------------------------------------
   int j;
   for(j=0; j<*i; j++)
      if(strcmp(data[j].cust, sale_rec.cust)==0) break;
   if(j==*i){                                              //if there is no record of this customer, create a new one
      strcpy(data[*i].cust, sale_rec.cust);
      strcpy(data[*i].max_prod, sale_rec.prod);
      strcpy(data[*i].min_prod, sale_rec.prod);
      strcpy(data[*i].max_state, sale_rec.state);
      strcpy(data[*i].min_state, sale_rec.state);
      data[*i].max_dd=sale_rec.dd;
      data[*i].max_mm=sale_rec.mm;
      data[*i].max_yy=sale_rec.yy;
      data[*i].min_dd=sale_rec.dd;
      data[*i].min_mm=sale_rec.mm;
      data[*i].min_yy=sale_rec.yy;
      data[*i].max_quant=sale_rec.quant;
      data[*i].min_quant=sale_rec.quant;
      data[*i].count=1;
      data[*i].sum=sale_rec.quant;
      (*i)++;
   }
   else{                                                 //updata the recond if new new quant is larger or smaller than old one
      if(sale_rec.quant>data[j].max_quant){
         strcpy(data[j].max_prod, sale_rec.prod);
         strcpy(data[j].max_state, sale_rec.state);
         data[j].max_dd=sale_rec.dd;
         data[j].max_mm=sale_rec.mm;
         data[j].max_yy=sale_rec.yy;
         data[j].max_quant=sale_rec.quant;
      }
      else if(sale_rec.quant<data[j].min_quant){
         strcpy(data[j].min_prod, sale_rec.prod);
         strcpy(data[j].min_state, sale_rec.state);
         data[j].min_dd=sale_rec.dd;
         data[j].min_mm=sale_rec.mm;
         data[j].min_yy=sale_rec.yy;
         data[j].min_quant=sale_rec.quant;
      }
      data[j].count++;
      data[j].sum+=sale_rec.quant;
   }
}
//----------------------------------------------------------------------
void process2(struct Data2 *data, int *i){
//----------------------------------------------------------------------
   int j;
   for(j=0; j<*i; j++){
      if(strcmp(data[j].cust, sale_rec.cust)==0 && strcmp(data[j].prod, sale_rec.prod)==0) break;    //search current combination in array
   }
   if(j==*i){                               //current combination doesn`t exist, create new one and store data in it
      strcpy(data[*i].cust, sale_rec.cust);
      strcpy(data[*i].prod, sale_rec.prod);
      if(strcmp(sale_rec.state, "NY")==0 && sale_rec.yy > 1999){
         data[*i].NY_MAX = sale_rec.quant;
         data[*i].NY_month = sale_rec.mm;
         data[*i].NY_day = sale_rec.dd;
         data[*i].NY_year = sale_rec.yy;
      }
      else data[*i].NY_MAX=-1;
      if(strcmp(sale_rec.state, "NJ")==0 && sale_rec.yy > 1999){
         data[*i].NJ_MIN = sale_rec.quant;
         data[*i].NJ_month = sale_rec.mm;
         data[*i].NJ_day = sale_rec.dd;
         data[*i].NJ_year = sale_rec.yy;
      }
      else data[*i].NJ_MIN=-1;
      if(strcmp(sale_rec.state, "CT")==0){
         data[*i].CT_MIN = sale_rec.quant;
         data[*i].CT_month = sale_rec.mm;
         data[*i].CT_day = sale_rec.dd;
         data[*i].CT_year = sale_rec.yy;
      }
      else data[*i].CT_MIN=-1;
      (*i)++;
   }
   else{                                    //current combination has been recorded, check whether this com should be updated  
      if(strcmp(sale_rec.state, "NY")==0 && sale_rec.yy > 1999 && (sale_rec.quant > data[j].NY_MAX || data[j].NY_MAX == -1)){
         data[j].NY_MAX = sale_rec.quant;
         data[j].NY_month = sale_rec.mm;
         data[j].NY_day = sale_rec.dd;
         data[j].NY_year = sale_rec.yy;
      }
      if(strcmp(sale_rec.state, "NJ")==0 && sale_rec.yy > 1999 && (sale_rec.quant < data[j].NJ_MIN || data[j].NJ_MIN == -1)){
         data[j].NJ_MIN = sale_rec.quant;
         data[j].NJ_month = sale_rec.mm;
         data[j].NJ_day = sale_rec.dd;
         data[j].NJ_year = sale_rec.yy;
      }
      if(strcmp(sale_rec.state, "CT")==0 && (sale_rec.quant < data[j].CT_MIN || data[j].CT_MIN == -1)){
         data[j].CT_MIN = sale_rec.quant;
         data[j].CT_month = sale_rec.mm;
         data[j].CT_day = sale_rec.dd;
         data[j].CT_year = sale_rec.yy;
      }
   }
}